###########################################################################
#  Author : MANU P ANAND : email:manupanand@outlook.com
############################################################################
# sudo kubeadm reset # uninstall all and reset control plane if error
#"PS1="MASTER->"
#crictl ps #similar to docker ps for containerd
######################################################################################################

- name: Setting prompt name
  ansible.builtin.lineinfile:
     path: "/home/ec2-user/.bashrc"
     line: 'export PS1="\[\e[1;31m\]\u\[\e[0m\]@\[\e[1;34m\]{{ role_name }}\[\e[0m\] \w \$ "'
     create: true
     mode: '0644'

- name: Source bashrc
  ansible.builtin.shell: |
      source ~/.bashrc
  args:
   executable:  /bin/bash

- name: Install firewalld  and rsyslog
  ansible.builtin.dnf:
    name: 
      - firewalld
      - rsyslog
    state: latest

- name: Enable firewalld
  ansible.builtin.systemd_service:
     name: firewalld
     state: restarted
     enabled: true

- name: Enable ports using firewalld
  ansible.builtin.shell: "firewall-cmd --zone=trusted --add-port={{ item }}/tcp --permanent && firewall-cmd --reload"
  loop: 
    - 22 # ssh 
    - 443 #https
    - 6443 #kubeapiserver
    - 10250    # kubelet
    - 10259 #kube-scheduler
    - 10257 #kube-control-manger
- name: Enable port range - 2379-2380 etcd
  ansible.builtin.shell: "firewall-cmd --zone=trusted --add-port=2379-2380/tcp --permanent && firewall-cmd --reload"
      
#############################################################
# disable swap |disk partition
# swapoff -a #disable al swap area
# use rhel ot ubuntu
# sudo swapoff -a  # check commands
# # sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
##############################################################
- name: Disable Swap 
  ansible.builtin.shell: | 
     swapoff -a 

- name: Create log file 
  ansible.builtin.file: 
    path: /var/log/disableswap.log 
    state: touch
    owner: root 
    group: root 
    mode : '0644'

- name:  Copy swapoff service file for permanent disable swap 
  ansible.builtin.copy: 
    src: disableswap.service 
    dest: /etc/systemd/system/disableswap.service 
    owner:  root 
    group: root 
    mode: "0644"
    
  
- name: Enable disableswap| firewall| rsyslog service 
  ansible.builtin.systemd_service: 
    name: "{{item}}"
    state: restarted 
    enabled: true 
    daemon_reload: true 
  loop: 
     - disableswap 
     - firewalld 
     - rsyslog 

- name: Copy k8s config to modules-load.d 
  ansible.builtin.copy: 
    src: k8s.conf 
    dest: /etc/modules-load.d/k8s.conf 
    owner: root 
    group: root 
    mode: '0644' 
    

- name: Copy k8s config to sysctl 
  ansible.builtin.copy: 
     src: k8ss.conf 
     dest: /etc/sysctl.d/k8ss.conf
     owner: root 
     group: root 
     mode: '0644'
      
# forwarding ip4 and letting ip tables to see bridged traffic
- name: Run modprobe and sysctl 
  ansible.builtin.shell: | 
    modprobe overlay
    modprobe br_netfilter
    sysctl --system 
   
####################################################################################################################################
# Verify that the br_netfilter, overlay modules are loaded by running the following commands:
# lsmod | grep br_netfilter
# lsmod | grep overlay
# Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:
#sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
###############################################################################################################################

- name: Install runc 
  ansible.builtin.dnf: 
    name: runc 
    state:  latest 

- name: Download and extract Containerd 
  ansible.builtin.unarchive: 
     src:  https://github.com/containerd/containerd/releases/download/v2.0.4/containerd-2.0.4-linux-amd64.tar.gz
     dest: "/tmp" #check if it copy bin folder or files
     remote_src: true
      
- name: Copy the files containerd to usr/local/bin
  ansible.builtin.copy: 
    src: "/tmp/bin/"
    dest: "/usr/local/bin/"
    owner: root 
    group: root 
    mode: '0744'


- name: Copy containerd service 
  ansible.builtin.copy: 
    src: containerd.service 
    dest: /etc/systemd/system/containerd.service 
    owner: root 
    group: root 
    

- name: create containerd folder /etc/containerd
  ansible.builtin.file: 
     path:  /etc/containerd 
     state: directory 
     owner: root 
     group: root 
     mode: '0755' 

- name: Copy config file to /etc/containerd 
  ansible.builtin.copy: 
    src: config.toml 
    dest: /etc/containerd/config.toml  
    owner: root 
    group: root 
    mode: '0644' 
    

- name: Start and enable containerd service
  ansible.builtin.systemd_service: 
    name: containerd 
    state: restarted 
    enabled: true 
    daemon_reload: true 
 
#####################################################################################
# sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
# sudo systemctl status containerd
# #######################################################3

- name: Download and unarchive crictl 
  ansible.builtin.unarchive: 
    src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.32.0/crictl-v1.32.0-linux-amd64.tar.gz 
    dest: "/usr/bin/"
    owner: root 
    group: root 
    mode: '0744' 
    remote_src: true

- name: Copy crictl.yaml file 
  ansible.builtin.copy: 
    src: crictl.yaml 
    dest: /etc/crictl.yaml 
    owner: root 
    group: root 
    mode: '0644' 
    

- name: Make directory for CNI 
  ansible.builtin.file: 
     path: /opt/cni/bin 
     state: directory 
     owner: root 
     group: root 
     mode: '0755'

- name: Download and unarchive CNI plugins
  ansible.builtin.unarchive:  
    src:  https://github.com/containernetworking/plugins/releases/download/v1.6.2/cni-plugins-linux-amd64-v1.6.2.tgz 
    dest: "/opt/cni/bin/"
    owner: root 
    group: root 
    mode: '0744' 
    remote_src: true

  
- name: Install dependencies   
  ansible.builtin.dnf: 
    name: "{{ item }}"
    state: latest 
  loop: 
    - curl 
    - gnupg2 
    - ca-certificates 
    - jq  

- name: Copy kubernetes repo 
  ansible.builtin.copy: 
    src: kubernetes.repo 
    dest: /etc/yum.repos.d/kubernetes.repo 
    owner: root 
    group: root 
    mode: '0644' 
    

- name: Install Kubeadm Kubectl kubelet  
  ansible.builtin.dnf: 
    name: "{{ item }}"
    state: latest 
  loop: 
    - kubeadm 
    - kubelet 
    - kubectl 
#sudo dnf versionlock add kubeadm kubectl kubelet
# check sudo dnf versionlock list 
- name: Ensure dnf-plugins-core installed 
  ansible.builtin.dnf: 
    name: dnf-plugins-core 
    state: present  

- name: Install Version lock
  ansible.builtin.yum: 
    name: python3-dnf-plugin-versionlock
    state: present


- name: Hold Kubeadm kubectl kubelet 
  ansible.builtin.shell: yum versionlock  kubeadm kubectl kubelet 
  register: lock_status 
  changed_when: "'added' in lock_status.stdout"

- name: Restart kubelet 
  ansible.builtin.systemd_service: 
    name: kubelet 
    state: restarted 
    enabled: true 
    daemon_reload: true 

- name: configure crictl 
  ansible.builtin.command: crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock 
  register: crictl_config 

- name: Debug 
  ansible.builtin.debug: 
     msg: "{{ crictl_config.stdout }}"



######################### Only for control plane ###############################  
- name: Install K9s 
  ansible.builtin.dnf: 
   name: https://github.com/derailed/k9s/releases/download/v0.40.10/k9s_linux_amd64.rpm
   state: present
  

- name: Get IP address 
  ansible.builtin.shell:  hostname -I | awk '{print $1}' 
  register: ip_address


- name: Debug 
  ansible.builtin.debug: 
     msg: "{{ ip_address.stdout }}"




# hostname -I | awk '{print $1}'

# sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=172.31.89.68 --node-name master

# kubeadm join 172.31.5.137:6443 --token rtyuwn.74gqg8sbl82hhhsh --discovery-token-ca-cert-hash sha256:ae0445ef7ffe4a8d569595d4542f896fe8e7be3ba489a96aacc4dfa2a2b10fa4 

#  mkdir -p $HOME/.kube
#   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#   sudo chown $(id -u):$(id -g) $HOME/.kube/config

# #Install calico
# kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/tigera-operator.yaml
# curl https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/custom-resources.yaml -O
# kubectl create -f custom-resources.yaml